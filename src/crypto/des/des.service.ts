import { Injectable } from '@nestjs/common';

@Injectable()
export class DesService {
  // === TABELAS DE PERMUTA√á√ÉO E SUBSTITUI√á√ÉO DO DES ===
  // Estas tabelas s√£o a "receita secreta" do algoritmo DES.
  // Elas definem como os bits ser√£o reorganizados durante o processo.
  // üè† Analogia: Como se fosse a planta de uma casa, definindo onde cada c√¥modo ser√° posicionado.

  // Permuta√ß√£o Inicial (IP) - Reorganiza os bits do bloco de entrada antes do processamento principal
  // Esta √© a primeira transforma√ß√£o aplicada aos dados originais
  // üè† Analogia: A entrada da casa, onde reorganizamos as pessoas antes de entrarem nos c√¥modos
  private IP: number[] = [
    58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46,
    38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9,
    1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47,
    39, 31, 23, 15, 7,
  ];

  // Permuta√ß√£o Final (FP) - Reorganiza os bits ap√≥s as 16 rodadas de processamento
  // Esta √© a √∫ltima transforma√ß√£o e √© o inverso da permuta√ß√£o inicial
  // üè† Analogia: A sa√≠da da casa, onde as pessoas se reagrupam antes de sair
  private FP: number[] = [
    40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14,
    54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60,
    28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41,
    9, 49, 17, 57, 25,
  ];

  // Expans√£o E-bit - Expande o bloco de 32 bits para 48 bits
  // Isso √© necess√°rio porque a subchave tem 48 bits, ent√£o precisamos "esticar" os dados
  // para combinar com a subchave usando a opera√ß√£o XOR
  // üçï Analogia: Como esticar a massa da pizza para caber no formato da forma
  private E: number[] = [
    32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15,
    16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28,
    29, 28, 29, 30, 31, 32, 1,
  ];

  // Permuta√ß√£o P - Reorganiza os bits ap√≥s a substitui√ß√£o nas S-Boxes
  // Aumenta a "confus√£o" no algoritmo, tornando mais dif√≠cil de quebrar
  // üÉè Analogia: Como embaralhar cartas para garantir que ningu√©m saiba a ordem delas
  private P: number[] = [
    16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14,
    32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25,
  ];

  // S-Boxes (Caixas de Substitui√ß√£o)
  // O cora√ß√£o da seguran√ßa do DES!
  // Estas tabelas substituem blocos de 6 bits por blocos de 4 bits de forma n√£o-linear
  // Esta substitui√ß√£o n√£o-linear √© o que torna o DES resistente a certos tipos de ataques
  // üé≠ Analogia: Como um jogo de m√°scaras, onde cada pessoa troca de identidade seguindo regras espec√≠ficas
  private SBOX: number[][][] = [
    // S1
    [
      [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
      [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
      [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
      [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
    ],
    // S2
    [
      [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
      [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
      [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
      [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
    ],
    // S3
    [
      [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
      [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
      [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
      [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
    ],
    // S4
    [
      [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
      [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
      [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
      [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
    ],
    // S5
    [
      [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
      [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
      [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
      [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
    ],
    // S6
    [
      [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
      [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
      [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
      [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
    ],
    // S7
    [
      [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
      [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
      [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
      [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
    ],
    // S8
    [
      [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
      [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
      [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
      [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
    ],
  ];

  // === TABELAS DE GERA√á√ÉO DE CHAVES ===
  // Estas tabelas s√£o usadas para criar as 16 subchaves a partir da chave principal
  // üîë Analogia: Como criar 16 chaves diferentes a partir de uma chave-mestra

  // PC1 - Permuta√ß√£o da Chave 1
  // Reduz a chave de 64 para 56 bits, eliminando os bits de paridade
  // ‚úÇÔ∏è Analogia: Como cortar os peda√ßos desnecess√°rios de uma chave para criar uma nova
  private PC1: number[] = [
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35,
    27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46,
    38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4,
  ];

  // PC2 - Permuta√ß√£o da Chave 2
  // Comprime os 56 bits para 48 bits para uso nas rodadas
  // üèãÔ∏è Analogia: Como comprimir uma massa para torn√°-la mais compacta
  private PC2: number[] = [
    14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27,
    20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56,
    34, 53, 46, 42, 50, 36, 29, 32,
  ];

  // Quantidade de deslocamentos para cada rodada na gera√ß√£o de subchaves
  // Define quantas posi√ß√µes a chave ser√° rotacionada em cada rodada
  // üîÑ Analogia: Quantas vezes devemos girar a chave na fechadura em cada etapa
  private SHIFTS: number[] = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

  // Chave principal de criptografia (a chave mestra)
  private defaultKey: string;
  private key: string;

  // Array que armazena as 16 subchaves geradas a partir da chave principal
  // üîë Analogia: Como um chaveiro com 16 chaves diferentes derivadas da chave mestra
  private subKeys: string[] = [];

  // Controla se estamos no modo demonstra√ß√£o (com logs detalhados)
  private demoMode: boolean = false;

  // Controla quanto tempo esperar entre os logs no modo demonstra√ß√£o
  private stepDelay: number = 200;

  constructor() {
    // Define uma chave inicial em formato hexadecimal (16 caracteres = 64 bits)
    // Na pr√°tica, esta chave seria fornecida pelo usu√°rio ou por um sistema de gerenciamento de chaves
    // üîê Analogia: Como a senha mestra que voc√™ usa para um cofre importante
    this.defaultKey = '0123456789ABCDEF';
    this.key = this.defaultKey;

    // Gera as 16 subchaves necess√°rias para o processo de criptografia/descriptografia
    this.generateSubKeys();
  }

  // Ativa ou desativa o modo de demonstra√ß√£o com logs detalhados
  setDemoMode(enabled: boolean): void {
    this.demoMode = enabled;
  }

  // Retorna a chave atual em uso
  getCurrentKey(): string {
    return this.key;
  }

  // === M√âTODO PRINCIPAL DE CRIPTOGRAFIA ===
  // Transforma texto leg√≠vel em texto cifrado usando o algoritmo DES
  // üì¨ Analogia: Como colocar uma carta em um envelope lacrado que s√≥ o destinat√°rio pode abrir
  encrypt(plaintext: string, customKey?: string): string {
    // Se estamos no modo demonstra√ß√£o, mostramos logs detalhados
    if (this.demoMode) {
      console.log('\nüîç DETALHES DA CRIPTOGRAFIA DES:');
    }

    // Se uma chave personalizada foi fornecida, reconfigura as subchaves
    if (customKey && customKey !== this.key) {
      if (this.demoMode) {
        console.log('üîÑ Configurando nova chave personalizada...');
        setTimeout(() => {
          console.log(`üîë Nova chave: ${customKey}`);
        }, this.stepDelay);
      }
      this.setKey(customKey);
    }

    // Converte o texto em representa√ß√£o bin√°ria (cada caractere vira 8 bits)
    const binaryText = this.textToBinary(plaintext);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`üìù Texto original: "${plaintext}"`);
        console.log(
          `üî¢ Representa√ß√£o bin√°ria: ${binaryText.substring(0, 24)}...`,
        );
        console.log(`   (${binaryText.length} bits no total)`);
      }, this.stepDelay * 2);
    }

    // Divide o texto em blocos de 64 bits, pois o DES processa 64 bits por vez
    // üì¶ Analogia: Como dividir um grande pacote em caixas menores para processamento
    const blocks = this.splitIntoBlocks(binaryText, 64);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(
          `üì¶ Dividindo em ${blocks.length} blocos de 64 bits cada...`,
        );
      }, this.stepDelay * 3);
    }

    let result = '';
    let blockIndex = 0;

    for (const block of blocks) {
      blockIndex++;

      if (this.demoMode) {
        setTimeout(
          () => {
            console.log(
              `\nüß© Processando bloco ${blockIndex} de ${blocks.length}...`,
            );
          },
          this.stepDelay * (4 + blockIndex),
        );
      }

      // Processa cada bloco individualmente atrav√©s do algoritmo DES
      const encryptedBlock = this.processBlock(block, true);

      // Converte o resultado bin√°rio em formato hexadecimal para tornar a sa√≠da mais compacta
      const hexBlock = this.binaryToHex(encryptedBlock);
      result += hexBlock;

      if (this.demoMode) {
        setTimeout(
          () => {
            console.log(`   ‚úÖ Bloco ${blockIndex} cifrado: ${hexBlock}`);
          },
          this.stepDelay * (5 + blockIndex),
        );
      }
    }

    if (this.demoMode) {
      setTimeout(
        () => {
          console.log(`\nüîí Resultado final da criptografia: ${result}`);
        },
        this.stepDelay * (6 + blocks.length),
      );
    }

    return result;
  }

  // === M√âTODO PRINCIPAL DE DESCRIPTOGRAFIA ===
  // Transforma o texto cifrado de volta ao texto original
  // üì≠ Analogia: Como abrir o envelope lacrado para ler a carta dentro
  decrypt(ciphertext: string, customKey?: string): string {
    // Se estamos no modo demonstra√ß√£o, mostramos logs detalhados
    if (this.demoMode) {
      console.log('\nüîç DETALHES DA DESCRIPTOGRAFIA DES:');
    }

    // Se uma chave personalizada foi fornecida, reconfigura as subchaves
    if (customKey && customKey !== this.key) {
      if (this.demoMode) {
        console.log(
          'üîÑ Configurando chave personalizada para descriptografia...',
        );
        setTimeout(() => {
          console.log(`üîë Chave: ${customKey}`);
        }, this.stepDelay);
      }
      this.setKey(customKey);
    }

    // Converte o texto cifrado (em hex) para formato bin√°rio
    const binaryText = this.hexToBinary(ciphertext);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`üîí Texto cifrado: "${ciphertext}"`);
        console.log(
          `üî¢ Representa√ß√£o bin√°ria: ${binaryText.substring(0, 24)}...`,
        );
        console.log(`   (${binaryText.length} bits no total)`);
      }, this.stepDelay * 2);
    }

    // Divide em blocos de 64 bits para processamento
    const blocks = this.splitIntoBlocks(binaryText, 64);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(
          `üì¶ Dividindo em ${blocks.length} blocos de 64 bits cada...`,
        );
      }, this.stepDelay * 3);
    }

    let result = '';
    let blockIndex = 0;

    for (const block of blocks) {
      blockIndex++;

      if (this.demoMode) {
        setTimeout(
          () => {
            console.log(
              `\nüß© Descriptografando bloco ${blockIndex} de ${blocks.length}...`,
            );
          },
          this.stepDelay * (4 + blockIndex),
        );
      }

      // Processa cada bloco usando o mesmo algoritmo, mas com as subchaves em ordem inversa
      const decryptedBlock = this.processBlock(block, false);

      // Converte o resultado bin√°rio de volta para texto
      const textBlock = this.binaryToText(decryptedBlock);
      result += textBlock;

      if (this.demoMode) {
        setTimeout(
          () => {
            console.log(
              `   ‚úÖ Bloco ${blockIndex} descriptografado: "${textBlock}"`,
            );
          },
          this.stepDelay * (5 + blockIndex),
        );
      }
    }

    // Remove o preenchimento (padding) adicionado no final durante a criptografia
    const cleanResult = result.replace(/\0+$/, '');

    if (this.demoMode) {
      setTimeout(
        () => {
          console.log(
            `\nüìù Resultado final da descriptografia: "${cleanResult}"`,
          );
        },
        this.stepDelay * (6 + blocks.length),
      );
    }

    return cleanResult;
  }

  // === N√öCLEO DO ALGORITMO DES ===
  // Processa um bloco de 64 bits aplicando as 16 rodadas da Rede de Feistel
  // üè≠ Analogia: Como uma linha de produ√ß√£o com 16 esta√ß√µes, onde cada esta√ß√£o transforma o produto
  private processBlock(block: string, encrypt: boolean): string {
    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   üîÑ Aplicando permuta√ß√£o inicial (IP) ao bloco...`);
      }, this.stepDelay);
    }

    // Aplica a permuta√ß√£o inicial (IP) para reorganizar os bits
    let permuted = this.permute(block, this.IP);

    // Divide o bloco em duas metades de 32 bits cada (esquerda e direita)
    // Essa √© a base da Rede de Feistel
    // ‚úÇÔ∏è Analogia: Como cortar uma folha de papel ao meio para trabalhar em cada parte separadamente
    let left = permuted.substring(0, 32);
    let right = permuted.substring(32);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   ‚úÇÔ∏è Dividindo em dois blocos de 32 bits: L0 e R0`);
      }, this.stepDelay * 2);
    }

    // 16 rodadas do algoritmo Feistel
    // üîÑ Analogia: Como 16 etapas de um processo qu√≠mico, onde cada etapa transforma o composto
    for (let i = 0; i < 16; i++) {
      // Para descriptografia, usamos as subchaves na ordem inversa (da 16¬™ para a 1¬™)
      const round = encrypt ? i : 15 - i;

      if (this.demoMode && (i === 0 || i === 15)) {
        // Mostrar apenas primeira e √∫ltima rodada para n√£o sobrecarregar
        setTimeout(
          () => {
            console.log(
              `   üîÑ Rodada ${i + 1}/${16}: Aplicando transforma√ß√µes Feistel...`,
            );
            if (i === 0) {
              console.log(`      (As rodadas 2-15 seguem o mesmo padr√£o)`);
            }
          },
          this.stepDelay * (3 + i),
        );
      }

      // Armazena o lado direito atual antes de modific√°-lo
      const temp = right;

      // O novo lado direito √© o resultado do XOR entre o lado esquerdo e a fun√ß√£o F
      // aplicada ao lado direito atual com a subchave desta rodada
      // üîÄ Analogia: Como misturar dois ingredientes para formar um novo composto
      right = this.xor(left, this.f(right, this.subKeys[round]));

      // O lado esquerdo da pr√≥xima rodada se torna o lado direito atual
      left = temp;
    }

    // Combina as metades (com uma troca final)
    // Na √∫ltima rodada, n√£o trocamos L e R como de costume, mas os concatenamos em ordem inversa
    // üß© Analogia: Como juntar as duas metades de um quebra-cabe√ßa, mas em ordem inversa
    const combined = right + left;

    if (this.demoMode) {
      setTimeout(() => {
        console.log(
          `   üß© Combinando os blocos finais em ordem inversa: R16 + L16`,
        );
        console.log(`   üîÑ Aplicando permuta√ß√£o final (FP)...`);
      }, this.stepDelay * 20);
    }

    // Aplica a permuta√ß√£o final (FP) para finalizar o processo
    return this.permute(combined, this.FP);
  }

  // === FUN√á√ÉO F DA REDE DE FEISTEL ===
  // Esta √© a fun√ß√£o de "confus√£o" que torna o DES seguro
  // üß™ Analogia: Como uma f√≥rmula qu√≠mica secreta que transforma os ingredientes
  private f(rightBlock: string, subKey: string): string {
    // Expans√£o: transforma o bloco de 32 bits em 48 bits para combinar com a subchave
    // üéà Analogia: Como inflar um bal√£o para aumentar seu tamanho
    const expanded = this.permute(rightBlock, this.E);

    // Combina com a subchave usando opera√ß√£o XOR
    // XOR √© revers√≠vel e perfeito para criptografia: aplicar o mesmo valor duas vezes retorna o original
    // üé≠ Analogia: Como misturar tintas de cores complementares - cada uma altera a outra de forma espec√≠fica
    const xored = this.xor(expanded, subKey);

    // Aplica√ß√£o das S-Boxes: transforma blocos de 6 bits em blocos de 4 bits
    // Esta √© a √∫nica opera√ß√£o n√£o-linear no DES e √© fundamental para sua seguran√ßa
    // üîÆ Analogia: Como uma caixa m√°gica que transforma objetos de forma imprevis√≠vel
    let result = '';
    for (let i = 0; i < 8; i++) {
      // Extrai um bloco de 6 bits para processar na S-Box
      const block = xored.substring(i * 6, (i + 1) * 6);

      // Calcula a linha (row) usando o primeiro e √∫ltimo bit do bloco
      const rowBits = block.charAt(0) + block.charAt(5);
      const row = parseInt(rowBits, 2);

      // Calcula a coluna (column) usando os 4 bits intermedi√°rios
      const colBits = block.substring(1, 5);
      const col = parseInt(colBits, 2);

      // Verifica√ß√£o para evitar erros de acesso √†s S-Boxes
      if (this.SBOX[i] === undefined || this.SBOX[i][row] === undefined) {
        console.error(`Erro ao acessar S-Box: i=${i}, row=${row}, col=${col}`);
        // Valor padr√£o para evitar o erro
        result += '0000';
      } else {
        // Obt√©m o valor da S-Box na posi√ß√£o [i][row][col] e converte para 4 bits
        // üìä Analogia: Como consultar uma tabela espec√≠fica para encontrar um valor correspondente
        const sboxValue = this.SBOX[i][row][col];
        result += sboxValue.toString(2).padStart(4, '0');
      }
    }

    // Aplica a permuta√ß√£o P ao resultado para aumentar a difus√£o
    // üå™Ô∏è Analogia: Como espalhar sementes ao vento para cobrir uma √°rea maior
    return this.permute(result, this.P);
  }

  // === GERA√á√ÉO DAS 16 SUBCHAVES ===
  // Cria as 16 subchaves diferentes, uma para cada rodada
  // üóùÔ∏è Analogia: Como um ferreiro forjando 16 chaves diferentes a partir de um √∫nico molde
  private generateSubKeys(): void {
    if (this.demoMode) {
      console.log('\nüîë GERANDO SUBCHAVES DES:');
      console.log(`   Chave principal: ${this.key}`);
    }

    // Converte a chave de formato hexadecimal para bin√°rio
    const binaryKey = this.hexToBinary(this.key);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   üî¢ Chave em formato bin√°rio: ${binaryKey}`);
        console.log(
          `   üîÑ Aplicando permuta√ß√£o PC1 (remove bits de paridade)...`,
        );
      }, this.stepDelay);
    }

    // Permuta√ß√£o PC1: reduz de 64 para 56 bits, removendo os bits de paridade
    const pc1 = this.permute(binaryKey, this.PC1);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   ‚úÇÔ∏è Dividindo a chave em duas metades de 28 bits...`);
      }, this.stepDelay * 2);
    }

    // Divide a chave em duas metades de 28 bits
    // ‚úÇÔ∏è Analogia: Como cortar uma barra de metal em duas para trabalhar em cada parte
    let c = pc1.substring(0, 28);
    let d = pc1.substring(28);

    // Limpa as subchaves existentes antes de gerar novas
    this.subKeys = [];

    // Gera as 16 subchaves atrav√©s de rota√ß√µes e permuta√ß√µes
    for (let i = 0; i < 16; i++) {
      if (this.demoMode) {
        setTimeout(
          () => {
            console.log(`   üîÑ Gerando subchave ${i + 1}/16...`);
          },
          this.stepDelay * (3 + i),
        );
      }

      // Rota√ß√£o √† esquerda de acordo com a tabela SHIFTS
      // üîÑ Analogia: Como girar uma roda dentada um certo n√∫mero de posi√ß√µes
      c = this.leftShift(c, this.SHIFTS[i]);
      d = this.leftShift(d, this.SHIFTS[i]);

      // Combina as duas metades e aplica a permuta√ß√£o PC2
      // para obter a subchave de 48 bits para esta rodada
      // üß© Analogia: Como juntar duas pe√ßas de metal e moldar uma nova forma
      const combined = c + d;
      const subKey = this.permute(combined, this.PC2);

      this.subKeys.push(subKey);
    }

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   ‚úÖ Geradas 16 subchaves com sucesso!`);
      }, this.stepDelay * 20);
    }
  }

  // === FUN√á√ïES AUXILIARES ===

  // Realiza uma permuta√ß√£o: reorganiza bits conforme a tabela fornecida
  // Vital para o "embaralhamento" de bits no DES
  // üÉè Analogia: Como embaralhar cartas de acordo com um padr√£o espec√≠fico
  private permute(input: string, table: number[]): string {
    let result = '';
    for (const pos of table) {
      // Subtrai 1 pois os √≠ndices da tabela come√ßam em 1, mas os arrays em 0
      result += input.charAt(pos - 1);
    }
    return result;
  }

  // Opera√ß√£o XOR bit a bit entre duas strings bin√°rias
  // XOR √© a opera√ß√£o perfeita para criptografia: A XOR B XOR B = A
  // üîÄ Analogia: Como um interruptor de luz - se voc√™ acionar o mesmo interruptor duas vezes, volta ao estado original
  // Exemplo: 1 XOR 1 = 0, 0 XOR 0 = 0, 1 XOR 0 = 1, 0 XOR 1 = 1
  private xor(a: string, b: string): string {
    let result = '';
    for (let i = 0; i < a.length; i++) {
      // Se os bits forem iguais, o resultado √© 0; se forem diferentes, √© 1
      result += (parseInt(a[i]) ^ parseInt(b[i])).toString();
    }
    return result;
  }

  // Rota√ß√£o √† esquerda (deslocamento circular)
  // Move os bits para a esquerda, colocando os que "caem fora" de volta no final
  // üîÑ Analogia: Como uma fila circular onde as pessoas que saem da frente v√£o para o final
  private leftShift(str: string, shifts: number): string {
    return str.substring(shifts) + str.substring(0, shifts);
  }

  // Converte texto normal em sua representa√ß√£o bin√°ria
  // Cada caractere se torna 8 bits (1 byte)
  // üî§ Analogia: Como traduzir palavras de portugu√™s para c√≥digo morse
  private textToBinary(text: string): string {
    let result = '';
    for (let i = 0; i < text.length; i++) {
      // Obt√©m o c√≥digo ASCII do caractere e converte para bin√°rio
      const char = text.charCodeAt(i);
      // Garante que cada byte tenha 8 d√≠gitos, preenchendo com zeros √† esquerda se necess√°rio
      result += char.toString(2).padStart(8, '0');
    }
    return result;
  }

  // Converte representa√ß√£o bin√°ria de volta para texto
  // Cada 8 bits s√£o interpretados como um caractere
  // üìù Analogia: Como traduzir c√≥digo morse de volta para palavras em portugu√™s
  private binaryToText(binary: string): string {
    let result = '';
    for (let i = 0; i < binary.length; i += 8) {
      // Pega 8 bits por vez
      const byte = binary.substring(i, i + 8);
      // Converte os 8 bits para um n√∫mero decimal e deste para o caractere correspondente
      const char = String.fromCharCode(parseInt(byte, 2));
      result += char;
    }
    return result;
  }

  // Converte hexadecimal para bin√°rio
  // Cada d√≠gito hex vira 4 bits
  // üßÆ Analogia: Como traduzir n√∫meros romanos para decimal, seguindo regras espec√≠ficas
  private hexToBinary(hex: string): string {
    let result = '';
    for (let i = 0; i < hex.length; i++) {
      // Converte cada d√≠gito hexadecimal para 4 bits bin√°rios
      const bin = parseInt(hex[i], 16).toString(2).padStart(4, '0');
      result += bin;
    }
    return result;
  }

  // Converte bin√°rio para hexadecimal
  // Cada 4 bits se tornam um d√≠gito hex
  // üßÆ Analogia: Como traduzir decimal para n√∫meros romanos
  private binaryToHex(binary: string): string {
    let result = '';
    // Garante que o n√∫mero de bits seja m√∫ltiplo de 4
    while (binary.length % 4 !== 0) {
      binary = '0' + binary;
    }

    // Converte cada 4 bits para um d√≠gito hexadecimal
    for (let i = 0; i < binary.length; i += 4) {
      const chunk = binary.substring(i, i + 4);
      const hex = parseInt(chunk, 2).toString(16).toUpperCase();
      result += hex;
    }
    return result;
  }

  // Fun√ß√£o principal da rede Feistel que processa um bloco de 32 bits com uma subchave
  // √â o cora√ß√£o do algoritmo, onde ocorre a substitui√ß√£o n√£o-linear atrav√©s das S-boxes
  // üèóÔ∏è Analogia: Como o chef de um restaurante transformando ingredientes simples em um prato complexo
  private feistelFunction(R: string, subKey: string): string {
    // 1. Expans√£o: Expande os 32 bits para 48 bits para combinar com a subchave
    // üéà Analogia: Como inflar um bal√£o para que ele ocupe mais espa√ßo
    const expandedR = this.permute(R, this.E);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`      üîÑ Expandindo bloco direito de 32 para 48 bits`);
      }, this.stepDelay);
    }

    // 2. XOR com a subchave
    // üîÄ Analogia: Como misturar as cartas de dois baralhos de forma espec√≠fica
    const xored = this.xor(expandedR, subKey);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`      ‚ö° Aplicando XOR com a subchave da rodada`);
      }, this.stepDelay * 2);
    }

    // 3. Substitui√ß√£o atrav√©s das S-boxes: mapeamento n√£o-linear
    // üé≠ Analogia: Como um jogo de troca de m√°scaras, onde cada pessoa escolhe uma nova identidade
    let substituted = '';
    for (let i = 0; i < 8; i++) {
      // Divide os 48 bits em 8 blocos de 6 bits
      const chunk = xored.substring(i * 6, (i + 1) * 6);

      // Determina a linha e a coluna para consulta na S-box
      // Primeiro e √∫ltimo bits determinam a linha (0-3)
      const row = parseInt(chunk[0] + chunk[5], 2);
      // Os 4 bits do meio determinam a coluna (0-15)
      const col = parseInt(chunk.substring(1, 5), 2);

      // Obt√©m o valor da S-box e converte para 4 bits
      const value = this.SBOX[i][row][col];
      substituted += value.toString(2).padStart(4, '0');
    }

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`      üé≠ Aplicando substitui√ß√£o atrav√©s das S-boxes`);
      }, this.stepDelay * 3);
    }

    // 4. Permuta√ß√£o final para aumentar a "difus√£o"
    // üÉè Analogia: Embaralhar as cartas uma √∫ltima vez antes do pr√≥ximo jogador
    const permuted = this.permute(substituted, this.P);

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`      üîÑ Aplicando permuta√ß√£o final P ao resultado`);
      }, this.stepDelay * 4);
    }

    return permuted;
  }

  // Divide uma string de entrada em blocos de tamanho espec√≠fico
  // Necess√°rio porque o DES processa dados em blocos de 64 bits
  // üì¶ Analogia: Como dividir uma carga grande em v√°rias caixas menores para transporte
  private splitIntoBlocks(input: string, blockSize: number): string[] {
    const blocks: string[] = [];
    // Adiciona padding (preenchimento) se necess√°rio para garantir blocos completos
    // O DES requer blocos completos de 64 bits
    while (input.length % blockSize !== 0) {
      input += '0';
    }
    // Divide a string em blocos do tamanho especificado
    for (let i = 0; i < input.length; i += blockSize) {
      blocks.push(input.substring(i, i + blockSize));
    }
    return blocks;
  }

  // Define uma nova chave e regenera as subchaves
  // üîë Analogia: Como trocar a fechadura de uma porta e criar novas c√≥pias das chaves
  setKey(newKey: string): void {
    if (!/^[0-9A-F]{16}$/.test(newKey)) {
      throw new Error(
        'A chave deve conter exatamente 16 caracteres hexadecimais (0-9, A-F)',
      );
    }

    if (this.demoMode) {
      console.log(`   üîë Definindo nova chave: ${newKey}`);
    }

    this.key = newKey;
    this.subKeys = []; // Limpa as subchaves existentes
    this.generateSubKeys(); // Gera novas subchaves com a nova chave
  }

  // Gera uma chave DES aleat√≥ria com entropia adequada (64 bits, sendo 56 bits efetivos)
  // üé≤ Analogia: Como criar um n√∫mero de loteria verdadeiramente aleat√≥rio
  generateRandomKey(): string {
    if (this.demoMode) {
      console.log(`\nüîÑ Gerando chave DES aleat√≥ria com alta entropia...`);
    }

    // Array para armazenar 8 bytes (64 bits)
    const byteArray = new Uint8Array(8);

    // Coleta entropia de v√°rias fontes dispon√≠veis
    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   üé≤ Coletando entropia de m√∫ltiplas fontes...`);
      }, this.stepDelay);
    }
    const entropyPool = this.collectEntropy();

    // Preenche os 8 bytes com valores derivados do pool de entropia
    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   üî¢ Gerando 8 bytes (64 bits) aleat√≥rios...`);
      }, this.stepDelay * 2);
    }

    for (let i = 0; i < 8; i++) {
      // Usa o pool de entropia para gerar cada byte
      const randomValue =
        Math.floor(entropyPool[i % entropyPool.length] * 256) % 256;

      // Ajusta os bits de paridade conforme a especifica√ß√£o DES original
      byteArray[i] = this.adjustParityBit(randomValue);

      if (this.demoMode && i === 7) {
        setTimeout(() => {
          console.log(`   ‚úÖ Bytes gerados e ajustados para paridade correta`);
        }, this.stepDelay * 3);
      }
    }

    // Converte para hexadecimal
    const hexKey = Array.from(byteArray)
      .map((b) => b.toString(16).padStart(2, '0'))
      .join('')
      .toUpperCase();

    if (this.demoMode) {
      setTimeout(() => {
        console.log(`   üîë Chave DES gerada: ${hexKey}`);
        console.log(
          `   ‚ÑπÔ∏è Esta chave possui 64 bits f√≠sicos, mas apenas 56 bits efetivos para criptografia`,
        );
        console.log(
          `      Os 8 bits restantes s√£o bits de paridade (1 bit por byte)`,
        );
      }, this.stepDelay * 4);
    }

    return hexKey;
  }

  // Coleta entropia de v√°rias fontes
  // üåÄ Analogia: Como coletar √°gua de diferentes rios para garantir um abastecimento diversificado
  private collectEntropy(): number[] {
    const entropy: number[] = [];

    // Usa timestamp atual em milissegundos
    const now = Date.now();
    entropy.push(now / 10000);
    entropy.push(now % 1000);

    // Usa o timestamp em microssegundos se dispon√≠vel
    if (typeof performance !== 'undefined') {
      const microTime = performance.now();
      entropy.push(microTime);
      entropy.push((microTime * 1000) % 1000);
    }

    // Usa a data completa como fonte adicional de entropia
    const date = new Date();
    entropy.push(date.getHours() / 24);
    entropy.push(date.getMinutes() / 60);
    entropy.push(date.getSeconds() / 60);
    entropy.push(date.getMilliseconds() / 1000);

    // Mistura valores usando algoritmo simples baseado em XOR e deslocamento
    for (let i = 0; i < 20; i++) {
      const lastValue = entropy[entropy.length - 1] || 0.5;
      const newValue = (Math.sin(lastValue * i) * 10000) % 1;
      entropy.push(newValue);
    }

    // Aplica transforma√ß√£o n√£o-linear em todos os valores
    for (let i = 0; i < entropy.length; i++) {
      // Mistura os valores usando t√©cnicas de hash simples
      entropy[i] = Math.abs(Math.sin(entropy[i] * 1000)) % 1;
    }

    return entropy;
  }

  // Ajusta o bit de paridade para seguir a especifica√ß√£o DES
  // No DES, cada byte da chave tem o bit menos significativo ajustado
  // para que o n√∫mero total de bits 1 seja √≠mpar (paridade √≠mpar)
  // üîç Analogia: Como colocar um selo de verifica√ß√£o em cada carta para garantir que √© aut√™ntica
  private adjustParityBit(value: number): number {
    // Conta o n√∫mero de bits 1 nos 7 bits mais significativos
    let bitCount = 0;
    let tempValue = value >> 1; // Ignora o bit menos significativo

    for (let i = 0; i < 7; i++) {
      if (tempValue & 1) bitCount++;
      tempValue >>= 1;
    }

    // Se o n√∫mero de bits for par, o bit menos significativo deve ser 1
    // Se o n√∫mero de bits for √≠mpar, o bit menos significativo deve ser 0
    // Isso garante paridade √≠mpar conforme especifica√ß√£o DES
    if (bitCount % 2 === 0) {
      return (value & 0xfe) | 1; // Define o bit menos significativo como 1
    } else {
      return value & 0xfe; // Define o bit menos significativo como 0
    }
  }
}
